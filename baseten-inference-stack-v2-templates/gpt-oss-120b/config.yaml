model_name: GPT OSS 120B
build_commands:
  - python -c 'from openai_harmony import load_harmony_encoding; load_harmony_encoding("HarmonyGptOss")'
python_version: py39
model_metadata:
  repo_id: openai/gpt-oss-120b
  example_model_input: {
    "model": "openai/gpt-oss-120b",
    "messages": [
      {
      "role": "user",
      "content": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]:"
      }
    ],
    "stream": true,
    "max_tokens": 2048,
    "temperature": 0.5
  }
  tags:
  - openai-compatible
resources:
  accelerator: B200:8
  cpu: '1'
  memory: 10Gi
  use_gpu: true
trt_llm:
  build:
    checkpoint_repository:
      repo: openai/gpt-oss-120b
      revision: refs/pr/35
      source: HF
  inference_stack: v2
  runtime:
    enable_chunked_prefill: true
    max_batch_size: 64
    max_num_tokens: 8192
    max_seq_len: 98304
    patch_kwargs:
      chat_processor: harmony
      backend: pytorch
      cuda_graph_config:
        enable_padding: true
      disable_overlap_scheduler: 1
      enable_autotuner: 0
      enable_iter_perf_stats: 0
      enable_trtllm_sampler: 1
      guided_decoding_backend: xgrammar
      kv_cache_config:
        enable_block_reuse: true
        free_gpu_memory_fraction: 0.8
      max_beam_width: 1
      max_input_len: 131072
      model_level_stop_words:
      - "<|call|>"
      tokenizer_limit_length: 131072
      trust_remote_code: 1
      moe_config:
        backend: TRTLLM
    served_model_name: openai/gpt-oss-120b
    tensor_parallel_size: 8
  version_overrides:
    # Use truss == 0.10.5
    v2_llm_version: trtllm-gpu-1.1.0rc0-6489f859-00df817e93
